Air canvas:

	⁃	bead is colour tracking. we creating a mask wherever we track the blue colour

	⁃	we create the mask using cv2.inRange()

	⁃	You can see the circle around the bead. The centre of that circle is detecting and tracing the coordinates as to where we are moving the bead

	⁃	if the bead’s coordinates are between : 10 to 40, 50 to 80, 90 to 120, then this coordinate = this colour and so on

	⁃	so up-till now we CREATD THE MASK, MADE THE CONTOUR, DETECTED THE CENTRE, STARTED STORING THE COORDINATES 

So, now you must have a question as to how are we able to draw?

	⁃	In every Successive arrays  we have a DEQUEUE

	⁃	Dequeue is such a data structure which acts as a queue from both the front and the back side. That is, we can insert and delete an element in that queue from both the ends.

	⁃	we are storing the coordinates through which the contour (the centre of the circle) is passing through 

	⁃	Red has its dequeue in which its coordinates are being stored. Similarly with blue, green, and yellow.

	⁃	And after storing the coordinates, in every successive frames, we are converting those pixels (matching the coordinates) to the respective colours.

	⁃	lets say i created infinite loops for every dequeue. now once we select a colour and start moving the bead, the contour’s centre tracks the coordinates and stores it in the respective dequeue. Then what it does is that it takes the dequeue and the stored coordinates in it and from the next frame itself it starts to change the pixel corresponding to the coordinate to the respective colour.

HOW ARE WE CHANGING THE COLOURS?
	⁃	We have fixed rectangles:
That is if horizontally if the coordinate ranges from 30 to 40 and vertically ranges from 10 to 70, then we chose the action mapped to that coordinate. Then the colour is blue

	⁃	and once we go to CLEAR ALL, we reset all the dequeues

CODING PART EXPLAINATION:

	⁃	Now coming to the coding part: first we see that we need 3 things (importing3 things) that is… the libraries cv2, numpy. and from collections we need dequeue to store the coordinates 

	⁃	trackbars: for colour tracking
using them we track our colour in the  hsv space. 

	⁃	dequeues. for blue point, red point, green point and yellow point. we store the coordinates from the contour in these respective dequeues.

	⁃	indexes (will tell about it later). COLOUR INDEX HELPS US TO DETERMINE THAT USING WHICH COLOUR SHOULD WE DRAW

	⁃	kernel: the beed that we had, it had lots of small impurities with it. So to remove the impurities what we do is we dilate the picture. and when we dilate the frame we need a kernel for it. 
NOTE: KERNAL IS A MATRIX WHICH HAS 1 IN ALL ITS PLACES. 
HERE WE ARE USING A 5x5 KERNAL

	⁃	COLOURS: those in there are the   different values in BGR format. 
blue: 255,0,0
green: 0,255,0
red: 0,0,255
yellow: 0,255,255

	⁃	paint window: we created the paint/canvas window (the white window on the side) 
we created a np.zero array to which we gave the BGR format. Whose dimensions we could see in the bracket. (471, 636, 3). we added 255 to it to make it show as white sheet

then we put text in it to label the rectangle saying which rectangle does what

	⁃	now we start capturing the video from here. 

	⁃	we took the camera frame instance. then after that we started with the frame reading. 

	⁃	we converted the 1st frame to hsv and according to the position of the trackbar, we set the lower and upper hsv values.

	⁃	ADDING THE COLOUR BUTTONS: 
In the white frame, we had to add it only once, but in the live frame, if we want to add it we need to add the buttons in every successive frame. 
cv2.rectangle()… using this we are drawing 5 types of rectangles. 4 for the colour and 1 to clear all. and next we name them

	⁃	using the inRange function: and applying erosion and dilation we created a mask. due to which we’ll get a precise bead in the mask. and if it has some impurities then it starts to glitch and starts to lag

	⁃	CONTOUR:
Next we found the contour here. currently centre is NONE because we haven’t found it yet.

Now we checking if its the contour we want or if its the contour of an impurity 
if len(cnts) > 0.    ->If we really got the contour

if it’s the real contour that we want then we find the minimum enclosing circle for it
now using the help of its movements we created its centre 

	⁃	then we checking if centre is less than 65. then it means that the user is trying to ask us to do some function corresponding to the 5 button on the top.
then using if else statement:
in the if part, the centre is less than 65. 
So we are matching the row and column values and determining which button the user is choosing and what action are we supposed to do.

in the else part, the centre is greater than 65. This means we aren’t trying to select any button.  In which case we have to draw. 
Here we use the colour index. What colour index does is that it says us using which colour should we draw. That is, in which dequeue should we put in the coordinates.
when we press a button the colour index changes and respective dequeue is activated.

	⁃	APPEND THE NEXT DEQUEUE WHEN NOTHING IS DETECTED TO AVOID MESSING UP.
Then, if we cover the bead and move our bead to other coordinate and then reveal the bead, what it’ll do is draw a straight line between its old coordinate (where we hid it) and the new coordinate (where we revealed it). To avoid messing it up we are appending those points where we didn’t draw into the dequeue.

	⁃	next part of the code to draw the line into the canvas
we keep revolving around all the dequeues, we see what points does it have and accordingly we colour out those pixels that correspond to the dequeues 

	⁃	Using cv2.imshow() we are showing the frame, canvas and mask window

	⁃	we are using q to quit the program 

	⁃	cap.release() and destroyAllWindows() are used to release the camera and close the windows that we are showing… basically stop using the various computer resources, be it the processor or the camera. The resources that we were using, we give it up over here.




